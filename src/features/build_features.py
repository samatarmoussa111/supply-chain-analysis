#Now let’s get started with analyzing the Supply Chain by looking at the relationship between the price of the products and the revenue generated by them:
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression

# Load the dataset
df = pd.read_pickle("../../data/interim/supply_chain_data.pkl")

# Set the style for the plots
plt.style.use("fivethirtyeight")
plt.rcParams["figure.figsize"] = (10, 5)
plt.rcParams["figure.dpi"] = 100
plt.rcParams["lines.linewidth"] = 2

product_types= df['Product type'].unique()

model = LinearRegression() #

fig, ax = plt.subplots()

for product_type in product_types:
    mask = df['Product type'] == product_type
    ax.scatter(df["Price"][mask], df["Revenue generated"][mask], label=product_type)
    model.fit(df["Price"][mask].to_numpy().reshape(-1, 1), df["Revenue generated"][mask].to_numpy())
    y_pred = model.predict(df["Price"][mask].to_numpy().reshape(-1, 1))
    ax.plot(df["Price"][mask], y_pred)
    ax.set_xlabel("Price")
    ax.set_ylabel("Revenue generated")
    ax.set_title("Revenue generated by product type")
    ax.legend(loc='upper left', bbox_to_anchor=(1, 1))
fig.tight_layout()
plt.show()
    
    
    
    

"""
Thus, the company derives more revenue from skincare products, and the higher the price of skincare products, the more revenue they generate. 
Now let’s have a look at the sales by product type:
"""

sales_data = df.groupby('Product type')['Number of products sold'].sum()

# Données
labels = sales_data.index

# Pourcentages de chaque catégorie
sizes = [(sales_data[label] / sum(sales_data)*100).round(1) for label in labels]
colors = ['#75C2C2', '#FFD580', '#FFB5A7']  # Couleurs turquoise, jaune pastel, corail

# Création de la figure et de l'axe
fig, ax = plt.subplots()

# Création du pie chart sans labels et pourcentages initiaux
wedges, _ = ax.pie(sizes, 
                   colors=colors,
                   startangle=90,
                   wedgeprops={'width': 0.5},  # Augmenter la largeur pour un anneau plus épais
                   labels=None,
                   autopct=None)

# Calculer la position des labels
for i, wedge in enumerate(wedges):
    # Obtenir l'angle du milieu de chaque section en radians
    ang = (wedge.theta2 + wedge.theta1)/2.
    ang = np.deg2rad(ang)
    
    # Calculer la position du texte (un peu plus proche du centre pour l'effet donut)
    x = 0.7 * np.cos(ang)
    y = 0.7 * np.sin(ang)
    
    # Ajouter le label de la catégorie
    ax.text(x, y, f"{labels[i]}\n{sizes[i]}%",
            ha='center', va='center',
            color='#555555',
            fontsize=10)

# Ajouter une légende à droite
ax.legend(wedges, labels,
         title=None,
         loc="upper right",
         bbox_to_anchor=(1.1, 1.0),
         frameon=False)  

# Ajuster les marges pour que la légende ne soit pas coupée
plt.tight_layout()

# Personnaliser le texte du titre
plt.title('Sales by Product Type', pad=20, color='#555555', fontsize=14)

# Assurer que le graphique soit un cercle
ax.axis('equal')

# Affichage
plt.show()


#So 45% of the business comes from skincare products, 29.5% from haircare, and 25.5% from cosmetics. Now let’s have a look at the total revenue generated from shipping carriers:

total_revenue = df.groupby('Shipping carriers')['Revenue generated'].sum()

fig, ax = plt.subplots()

# Création de l'histogramme
bars = ax.bar(total_revenue.index, total_revenue.values, color=['#003f5c', '#2f4b7c', '#665191'])

# Ajouter des labels aux barres
for bar in bars:
    height = bar.get_height()
    ax.text(bar.get_x() + bar.get_width()/2, height + 5000, f'{int(height):,}', 
            ha='center', fontsize=12, fontweight='bold')

# Configuration des axes
ax.set_xlabel('Shipping Carriers', fontsize=12, fontweight='bold')
ax.set_ylabel('Revenue Generated ($)', fontsize=12, fontweight='bold')
ax.set_title('Revenue Generated by Shipping Carriers', fontsize=14, fontweight='bold')

# Ajuster l'axe des ordonnées pour commencer à 0 et aller par pas de 50k
ax.set_ylim(0, max(revenues) + 50000)  # L'axe commence bien à 0
ax.set_yticks(np.arange(0, max(revenues) + 50000, 50000))  # Graduation tous les 50k

# Affichage de la grille horizontale
ax.yaxis.grid(True, linestyle='--', alpha=0.7)

# Affichage du graphique
plt.show()